
FUNCTION(LOAD_ISA_PROFILE ISA PLATFORM)
	set(KERNEL_BASE_DIR "src/kernel/arch")

	# Obtain sources for the ISA
	FILE(GLOB ISA_SOURCES
		"${KERNEL_BASE_DIR}/${ISA}/*.asm"
		"${KERNEL_BASE_DIR}/${ISA}/*.s"
		"${KERNEL_BASE_DIR}/${ISA}/*.cpp"
		"${KERNEL_BASE_DIR}/${ISA}/*.c")
	FILE(GLOB PLATFORM_SOURCES
		"${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/*.asm"
		"${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/*.s"
		"${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/*.c"
		"${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/*.cpp")

	# Load flags associated with ISA and Profile
	INCLUDE("${KERNEL_BASE_DIR}/${ISA}/flags.cmake")
	INCLUDE("${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/flags.cmake")

	# Load flags associated with ISA and Profile
	INCLUDE_DIRECTORIES(
		"${KERNEL_BASE_DIR}/${ISA}/"
		"${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/"
	)

	# Now export our output variables
	if( EXISTS "${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/link.ld" )
		set(PLATFORM_LINK "${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/link.ld")
	elseif( EXISTS "${KERNEL_BASE_DIR}/${ISA}/link.ld" )
		set(PLATFORM_LINK "${KERNEL_BASE_DIR}/${ISA}/link.ld")
	elseif( NOT DEFINED PLATFORM_LINK )
		message(STATUS "WARNING: no link(maybe link.ld) defined for ISA ${ISA} or plataform ${PLATFORM}")
	endif( EXISTS "${KERNEL_BASE_DIR}/${ISA}/${PLATFORM}/link.ld" )

	set(ISA_SOURCES ${ISA_SOURCES} PARENT_SCOPE)
	set(PLATFORM_SOURCES ${PLATFORM_SOURCES} PARENT_SCOPE)

	# And specific flags
	set(ISA_C_FLAGS ${ISA_C_FLAGS} PARENT_SCOPE)
	set(ISA_CXX_FLAGS ${ISA_CXX_FLAGS} PARENT_SCOPE)
	set(ISA_ASM_FLAGS ${ISA_ASM_FLAGS} PARENT_SCOPE)

	set(PLATFORM_LINK ${PLATFORM_LINK} PARENT_SCOPE)
	set(ISA_LINKER_FLAGS ${ISA_LINKER_FLAGS} PARENT_SCOPE)
	set(PLATFORM_LINKER_FLAGS ${PLATFORM_LINKER_FLAGS} PARENT_SCOPE)
ENDFUNCTION(LOAD_ISA_PROFILE)

FUNCTION(LOAD_COMPILER_PROFILE COMPILER)
	set(COMPILER_CODE_BASE_DIR "src/kernel/compiler")

	# Obtain sources of the compiler
	FILE(GLOB COMPILER_SOURCES
		"${COMPILER_CODE_BASE_DIR}/${COMPILER}/*.asm"
		"${COMPILER_CODE_BASE_DIR}/${COMPILER}/*.s"
		"${COMPILER_CODE_BASE_DIR}/${COMPILER}/*.cpp"
		"${COMPILER_CODE_BASE_DIR}/${COMPILER}/*.c"
	)

	# Load flags associated with compiler Profile
	INCLUDE("${COMPILER_CODE_BASE_DIR}/${COMPILER}/flags.cmake")

	INCLUDE_DIRECTORIES(
		"${COMPILER_CODE_BASE_DIR}/${COMPILER}/"
	)

	set(COMPILER_SOURCES ${COMPILER_SOURCES} PARENT_SCOPE)

	# And specific flags
	set(COMPILER_C_FLAGS ${COMPILER_C_FLAGS} PARENT_SCOPE)
	set(COMPILER_CXX_FLAGS ${COMPILER_CXX_FLAGS} PARENT_SCOPE)
	set(COMPILER_ASM_FLAGS ${COMPILER_ASM_FLAGS} PARENT_SCOPE)

	set(COMPILER_LINKER_FLAGS ${COMPILER_LINKER_FLAGS} PARENT_SCOPE)
ENDFUNCTION(LOAD_COMPILER_PROFILE)

